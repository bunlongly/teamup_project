datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  FREELANCER
}

enum PostType {
  STATUS
  RECRUITMENT
  PROJECT_SEEKING
}



model User {
  id          String     @id @default(uuid()) // Use UUID as the primary key
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  email       String     @unique
  username String @unique
  phoneNumber String     
  role        Role       @default(FREELANCER) 
  password    String
  location    String?
  imageUrl    String?
  coverImage String?
  jobTitle    String?
  bio         String?
  description String?
  socialLinks   Json?   @default("{}")
  
  // Relationships
  education   Education[]  // One-to-many relationship with Education
  experience  Experience[]  // One-to-many relationship with Experience
  userSkills  UserSkill[]   // One-to-many relationship with UserSkill (pivot table)
  posts         Post[]  

  followers      Connection[] @relation("Followers")
  following      Connection[] @relation("Following")

  notificationsReceived Notification[] @relation("NotificationsReceived")
  notificationsSent     Notification[] @relation("NotificationsSent")

  applications          Application[] @relation("UserApplications")
  tasks                 Task[]
  submissions   Submission[]

  chatParticipants ChatParticipant[]
  messages         Message[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Education {
  id          String     @id @default(uuid()) // Use UUID as the primary key
  degree      String
  school      String
  startYear   Int
  endYear     Int?
  description String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationship
  userId      String    // Foreign key to User (UUID)
  user        User      @relation(fields: [userId], references: [id])
}

model Experience {
  id              String    @id @default(uuid()) // Use UUID as the primary key
  position        String
  employmentType  String
  company         String
  status          String
  startDate       DateTime
  endDate         DateTime?
  description     String?
  imageUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationship
  userId          String    // Foreign key to User (UUID)
  user            User      @relation(fields: [userId], references: [id])  // Foreign key to User
}

model Skill {
  id          String    @id @default(uuid()) // Use UUID as the primary key
  skillName   String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Many-to-many relationship with UserSkill (pivot table)
  users       UserSkill[]  // Relationship with UserSkill table
}

model UserSkill {
  userId    String   // Foreign key to User (UUID)
  skillId   String   // Foreign key to Skill (UUID)
  createdAt DateTime @default(now())

  // Composite primary key (userId, skillId) to ensure unique pairs of users and skills
  @@id([userId, skillId])

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  skill     Skill   @relation(fields: [skillId], references: [id])
}


model Post {
  id                 String    @id @default(uuid())
  postType           PostType
  content            String?   
  projectName        String?   
  projectDescription String?   
  projectType        String?  
  platform           String?   
  technicalRole      String?  
  duration           String?   
  startDate          DateTime? 
  endDate            DateTime? 
  fileUrl            String?   
  requirement        String?   
  userId             String
  user               User      @relation(fields: [userId], references: [id])
    
  applications       Application[]
  tasks              Task[] 
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}


enum ConnectionStatus {
  PENDING
  ACCEPTED
}

model Connection {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  status      ConnectionStatus @default(PENDING)

  follower    User @relation("Following", fields: [followerId], references: [id])
  following   User @relation("Followers", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}


model Notification {
  id          String   @id @default(uuid())
  recipientId String   // The user who will receive the notification
  senderId    String?  // The user who triggered the notification (optional)
  type        String   // e.g. "connection_request", "connection_accepted"
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  recipient   User     @relation("NotificationsReceived", fields: [recipientId], references: [id])
  sender      User?    @relation("NotificationsSent", fields: [senderId], references: [id])
}


model Application {
  id          String              @id @default(uuid())
  postId      String
  applicantId String
  status      ApplicationStatus   @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  post        Post                @relation(fields: [postId], references: [id])
  applicant   User                @relation("UserApplications", fields: [applicantId], references: [id])

  @@unique([postId, applicantId])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}


model Task {
  id           String     @id @default(uuid())
  name         String
  startDate    DateTime?  // New field
  endDate      DateTime?  // New field
  description  String
  attachment   String?    // URL to the uploaded image (if any)
  status       TaskStatus @default(IN_PROGRESS)
  assignedToId String?    // Optional: the ID of the team member assigned
  postId       String     // The project ID (related to Post)
  link         String?    // New optional field for a link

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  submissions  Submission[]

  // Relations
  assignedTo   User?      @relation(fields: [assignedToId], references: [id])
  post         Post       @relation(fields: [postId], references: [id])
  
}

enum TaskStatus {
  BACKLOG
  REVIEW
  IN_PROGRESS
  FINISHED
}


model Submission {
  id           String           @id @default(uuid())
  userId       String           // the user who submits the work
  taskId       String           // the related task
  comment      String?          // the submission message or comment
  links        Json?            // JSON array of submitted links (e.g., ["https://github.com/...", "https://figma.com/..."])
  attachment   String?          // URL for an uploaded file/image
  reportReason String?          // optional field if a report is filed on the submission
  status       SubmissionStatus @default(SUBMITTED)

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])
}

enum SubmissionStatus {
  SUBMITTED
  APPROVED
  REJECTED
}


model Chat {
  id            String            @id @default(uuid())
  isGroup       Boolean           @default(false)
  chatName      String?           // For group chats, you can set a custom name
  participants  ChatParticipant[]
  messages      Message[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model ChatParticipant {
  chatId     String
  userId     String
  role       ChatParticipantRole @default(PARTICIPANT)
  joinedAt   DateTime           @default(now())

  chat       Chat   @relation(fields: [chatId], references: [id])
  user       User   @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
}

enum ChatParticipantRole {
  ADMIN
  PARTICIPANT
}

model Message {
  id          String   @id @default(uuid())
  chatId      String
  senderId    String
  content     String?  // Message text content (optional if only an attachment is sent)
  attachment  String?  // URL to an attachment (e.g., an image, video, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chat        Chat     @relation(fields: [chatId], references: [id])
  sender      User     @relation(fields: [senderId], references: [id])
}
